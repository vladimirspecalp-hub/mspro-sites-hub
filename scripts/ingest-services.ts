#!/usr/bin/env tsx
import fs from 'fs';
import path from 'path';
import { JSDOM } from 'jsdom';
import matter from 'gray-matter';

interface ParsedService {
  title: string;
  slug: string;
  category: string;
  excerpt: string;
  content: string;
  cover?: string;
  gallery?: string[];
  price?: string;
}

export class ServiceIngester {
  private inputDir: string;
  private outputDir: string;

  constructor(inputDir = 'public_html', outputDir = 'content/services') {
    this.inputDir = inputDir;
    this.outputDir = outputDir;
  }

  async ingestAll() {
    console.log('üöÄ Starting service ingestion...');
    
    // Create output directory if it doesn't exist
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }

    // For now, generate mock services since we don't have the HTML files
    const services = this.generateMockServices();
    
    for (const service of services) {
      await this.createMDXFile(service);
    }

    console.log(`‚úÖ Successfully ingested ${services.length} services!`);
  }

  private generateMockServices(): ParsedService[] {
    return [
      {
        title: "–ê–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
        slug: "antikorroziya",
        category: "–ê–Ω—Ç–∏–∫–æ—Ä",
        excerpt: "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞, –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π, –æ–≥–Ω–µ–∑–∞—â–∏—Ç–∞, –≤—ã—Å–æ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã.",
        content: `## –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–π–Ω–∞—è –∑–∞—â–∏—Ç–∞

–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —É—Å–ª—É–≥ –ø–æ –∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–π–Ω–æ–π –∑–∞—â–∏—Ç–µ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–±–æ—Ç
- –ü–µ—Å–∫–æ—Å—Ç—Ä—É–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ —Å—Ç–µ–ø–µ–Ω–∏ Sa 2.5
- –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –≥—Ä—É–Ω—Ç–æ–≤–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–æ–≤
- –§–∏–Ω–∏—à–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —ç–ø–æ–∫—Å–∏–¥–Ω—ã–º–∏ —ç–º–∞–ª—è–º–∏
- –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–ª—â–∏–Ω–æ–º–µ—Ä–æ–º

### –ì–∞—Ä–∞–Ω—Ç–∏–∏
- –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ 15 –ª–µ—Ç
- –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—ã 2 –≥–æ–¥–∞
- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π`,
        cover: "/images/placeholders/service-placeholder.webp",
        price: "–û—Ç 490 ‚ÇΩ/–º¬≤"
      },
      {
        title: "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–ª—å–ø–∏–Ω–∏–∑–º",
        slug: "alpinizm",
        category: "–í—ã—Å–æ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", 
        excerpt: "–í—ã—Å–æ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –º–æ–π–∫–∞ —Ñ–∞—Å–∞–¥–æ–≤, –º–æ–Ω—Ç–∞–∂, –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.",
        content: `## –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–ª—å–ø–∏–Ω–∏–∑–º

–í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Å–æ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

### –í–∏–¥—ã —Ä–∞–±–æ—Ç
- –ú–æ–π–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞—Å–∞–¥–æ–≤
- –ì–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è –º–µ–∂–ø–∞–Ω–µ–ª—å–Ω—ã—Ö —à–≤–æ–≤
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
- –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π
- –ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ

### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
- –°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
- –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
- –†–∞–±–æ—Ç—ã –±–µ–∑ –ª–µ—Å–æ–≤ - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 70%
- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤`,
        cover: "/images/placeholders/service-placeholder.webp",
        price: "–û—Ç 350 ‚ÇΩ/–º¬≤"
      }
    ];
  }

  private async createMDXFile(service: ParsedService) {
    const frontmatter = {
      title: service.title,
      slug: service.slug,
      excerpt: service.excerpt,
      category: service.category,
      cover: service.cover,
      gallery: service.gallery || [],
      faq: [
        {
          q: "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç–µ?",
          a: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞."
        },
        {
          q: "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—é?",
          a: "–î–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ –≤—Å–µ –≤–∏–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç."
        }
      ],
      price_note: service.price,
      schema: { type: "Service" },
      updatedAt: new Date().toISOString().split('T')[0]
    };

    const fileContent = matter.stringify(service.content, frontmatter);
    const filePath = path.join(this.outputDir, `${service.slug}.mdx`);
    
    fs.writeFileSync(filePath, fileContent);
    console.log(`üìù Created: ${filePath}`);
  }

  // Future method for parsing HTML files when available
  private async parseHTMLService(htmlPath: string): Promise<ParsedService> {
    const html = fs.readFileSync(htmlPath, 'utf-8');
    const dom = new JSDOM(html);
    const document = dom.window.document;

    // Extract service data from HTML
    const title = document.querySelector('h1')?.textContent?.trim() || 'Untitled Service';
    const content = document.querySelector('.content, .main-content')?.textContent?.trim() || '';
    
    // Generate slug from title
    const slug = title
      .toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-')
      .trim();

    // Extract images
    const images = Array.from(document.querySelectorAll('img'))
      .map(img => img.getAttribute('src'))
      .filter(src => src && !src.includes('placeholder'));

    // Extract price if available
    const price = this.extractPrice(html);

    return {
      title,
      slug,
      category: '–£—Å–ª—É–≥–∏', // Default category
      excerpt: content.substring(0, 160) + '...',
      content,
      cover: images[0],
      gallery: images.slice(1),
      price
    };
  }

  private extractPrice(html: string): string | undefined {
    const priceRegex = /(\d+[\s\d]*)\s*(?:‚ÇΩ|—Ä—É–±|—Ä—É–±–ª–µ–π?)/gi;
    const match = html.match(priceRegex);
    return match ? `–û—Ç ${match[0]}` : undefined;
  }
}

// CLI execution
if (require.main === module) {
  const ingester = new ServiceIngester();
  ingester.ingestAll().catch(console.error);
}

export default ServiceIngester;